var documenterSearchIndex = {"docs":
[{"location":"Examples/receiver/#Receiver","page":"Receiver","title":"Receiver","text":"","category":"section"},{"location":"Examples/receiver/","page":"Receiver","title":"Receiver","text":"This example configures the BladeRF as a receiver and captures samples on channel 0. There is a lot of setup, as this is a low-level API.","category":"page"},{"location":"Examples/receiver/","page":"Receiver","title":"Receiver","text":"using ..BladeRF\nusing DSP\nusing Plots\nENV[\"GKSwstype\"]=\"100\" # run Plots headless\n\n# Initialize the device\nradioBoard = BladeRF.BladeRFDevice();\n\n\ndesired_freq_Hz = round(Int64, 2.4e9);\nBladeRF.set_frequency(radioBoard, 0, desired_freq_Hz);\n\n# Get frequency to verify\nfreq = BladeRF.get_frequency(radioBoard, 0);\n\n# Setting bandwidth\ndesired_bandwidth = 5000000  # Desired bandwidth in Hz\nactual_bandwidth = BladeRF.set_bandwidth(radioBoard, 0, desired_bandwidth)\n\n# Enable module\nBladeRF.enable_module(radioBoard, 0, true)\n\n# Set sample rate\nactual_rate_Hz = BladeRF.set_sample_rate(radioBoard, 0, 1000000)\n\n# Set gain mode\nBladeRF.set_gain_mode(radioBoard, 0, BladeRF.BLADERF_GAIN_MGC)\n\n# Set gain\nBladeRF.set_gain(radioBoard, 0, 30)","category":"page"},{"location":"Examples/receiver/","page":"Receiver","title":"Receiver","text":"We have configured the receiver, and it's time to set up the sampling.","category":"page"},{"location":"Examples/receiver/","page":"Receiver","title":"Receiver","text":"sample_format = BladeRF.BLADERF_FORMAT_SC16_Q11\n\nnum_samples = 4096\n\nbytes_per_sample = 4\nbuffer_size_samples = 1024\nbuffer_size = ceil(Int, buffer_size_samples * bytes_per_sample)\nread_cycles = ceil(Int, num_samples / (buffer_size / bytes_per_sample))\ntotal_bytes = Int(read_cycles * buffer_size)\n\nreceived_bytes = Vector{UInt8}(undef, total_bytes)\nbuf = Vector{UInt8}(undef, buffer_size)\nmetadata = BladeRF.init_metadata()\ntimeout_ms = UInt(1000)  # Timeout in milliseconds\n\nchannel = BladeRF.BladerfChannelLayout(0)\n\nnum_buffers = UInt(32)\nblade_buffer_size = UInt(8192)\nnum_transfers = UInt(16)\nstream_timeout = UInt(1000)\n\nBladeRF.sync_config(radioBoard, channel, sample_format, num_buffers, blade_buffer_size, num_transfers, stream_timeout)\n\n\nBladeRF.enable_module(radioBoard, 0, true)\n\nGC.@preserve buf metadata begin\n    buffer_ptr = Base.unsafe_convert(Ptr{Nothing}, pointer(buf))\n    metadata_ref = Ref(metadata)\n    metadata_ptr = Base.unsafe_convert(Ptr{BladeRF.BladerfMetadata}, metadata_ref)\n\n    # Receive samples\n    index = 1\n    for i in 1:read_cycles\n        BladeRF.sync_rx(radioBoard, buffer_ptr, UInt(buffer_size_samples), metadata_ptr, timeout_ms)\n        unsafe_copyto!(received_bytes, index, buf, 1, buffer_size)\n        global index += buffer_size\n    end\nend\n\nBladeRF.enable_module(radioBoard, 0, false)\n\n# Close the device\nBladeRF.close(radioBoard)\n\n\ncomplex_samples = reinterpret(Complex{Int16}, received_bytes)\nnormalized_samples = Complex{Float32}.(complex_samples) ./ 2048.0;\nprintln(\"length(normalized_samples) = \", length(normalized_samples))","category":"page"},{"location":"Examples/receiver/","page":"Receiver","title":"Receiver","text":"We have now successfully sampled with the radio. To verify the samples, let's plot its Power Spectral Density (PSD).","category":"page"},{"location":"Examples/receiver/","page":"Receiver","title":"Receiver","text":"pgram = periodogram(normalized_samples, onesided=false, fs=actual_rate_Hz)\n\nplot(pgram.freq, pow2db.(pgram.power), title=\"Power Spectral Density\", xlabel=\"Frequency\", ylabel=\"Power [dB/Hz]\")\n\nsavefig(\"src/plots/Receiver_PSD.svg\"); nothing","category":"page"},{"location":"Examples/receiver/","page":"Receiver","title":"Receiver","text":"(Image: PSD of the samples)","category":"page"},{"location":"#BladeRF.jl-Documentation","page":"BladeRF.jl Documentation","title":"BladeRF.jl Documentation","text":"","category":"section"},{"location":"","page":"BladeRF.jl Documentation","title":"BladeRF.jl Documentation","text":"This is an unofficial wrapper for libbladeRF. For the latest information, see the official BladeRF documentation.","category":"page"},{"location":"","page":"BladeRF.jl Documentation","title":"BladeRF.jl Documentation","text":"Modules = [BladeRF]","category":"page"},{"location":"#BladeRF.ReturnCode","page":"BladeRF.jl Documentation","title":"BladeRF.ReturnCode","text":"ReturnCode\n\nError codes√ü returned by the BladeRF C library.\n\n\n\n\n\n","category":"constant"},{"location":"#BladeRF.deinit_stream-Tuple{Ptr{Nothing}}","page":"BladeRF.jl Documentation","title":"BladeRF.deinit_stream","text":"deinit_stream(stream_ptr::Ptr{Cvoid})\n\n\n\n\n\n","category":"method"},{"location":"#BladeRF.enable_module-Tuple{BladeRFDevice, Integer, Bool}","page":"BladeRF.jl Documentation","title":"BladeRF.enable_module","text":"enable_module(device::BladeRFDevice, channel::Integer, enable::Bool)\n\n\n\n\n\n","category":"method"},{"location":"#BladeRF.find_libbladeRF-Tuple{}","page":"BladeRF.jl Documentation","title":"BladeRF.find_libbladeRF","text":"find_libbladeRF()\n\nFunction to find the library in standard locations\n\n\n\n\n\n","category":"method"},{"location":"#BladeRF.install_bladeRF-Tuple{}","page":"BladeRF.jl Documentation","title":"BladeRF.install_bladeRF","text":"install_bladeRF()\n\nFunction to install the BladeRF library\n\n\n\n\n\n","category":"method"},{"location":"#BladeRF.stream-Tuple{Ptr{Nothing}, BladeRF.BladerfChannelLayout}","page":"BladeRF.jl Documentation","title":"BladeRF.stream","text":"\n\n\n\n","category":"method"},{"location":"#BladeRF.submit_stream_buffer-Tuple{Ptr{Nothing}, Ptr{Nothing}, UInt64}","page":"BladeRF.jl Documentation","title":"BladeRF.submit_stream_buffer","text":"submit_stream_buffer(stream_ptr::Ptr{Cvoid}, buffer::Ptr{Cvoid}, timeout_ms::UInt)\n\n\n\n\n\n","category":"method"},{"location":"#BladeRF.submit_stream_buffer_nonblocking-Tuple{Ptr{Nothing}, Ptr{Nothing}}","page":"BladeRF.jl Documentation","title":"BladeRF.submit_stream_buffer_nonblocking","text":"submit_stream_buffer_nonblocking(stream_ptr::Ptr{Cvoid}, buffer::Ptr{Cvoid})\n\n\n\n\n\n","category":"method"},{"location":"#BladeRF.sync_config-Tuple{BladeRFDevice, BladeRF.BladerfChannelLayout, BladerfFormat, UInt64, UInt64, UInt64, UInt64}","page":"BladeRF.jl Documentation","title":"BladeRF.sync_config","text":"sync_config(dev::BladeRFDevice, layout::BladerfChannelLayout, format::BladerfFormat, num_buffers::UInt, buffer_size::UInt, num_transfers::UInt, stream_timeout::UInt)\n\n\n\n\n\n","category":"method"},{"location":"#BladeRF.sync_rx-Tuple{BladeRFDevice, Ptr{Nothing}, UInt64, Ptr{BladerfMetadata}, UInt64}","page":"BladeRF.jl Documentation","title":"BladeRF.sync_rx","text":"sync_rx(dev::BladeRFDevice, samples::Ptr{Cvoid}, num_samples::UInt, metadata::Ptr{BladerfMetadata}, timeout_ms::UInt)\n\n\n\n\n\n","category":"method"},{"location":"#BladeRF.sync_tx-Tuple{BladeRFDevice, Ptr{Nothing}, UInt64, Ptr{BladerfMetadata}, UInt64}","page":"BladeRF.jl Documentation","title":"BladeRF.sync_tx","text":"sync_tx(dev::BladeRFDevice, samples::Ptr{Cvoid}, num_samples::UInt, metadata::Ptr{BladerfMetadata}, timeout_ms::UInt)\n\n\n\n\n\n","category":"method"}]
}
